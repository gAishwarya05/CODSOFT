TASK 1
NUMBER GUESSING GAME
#include <iostream>
#include <cstdlib>  // For rand() and srand()
#include <ctime>    // For time()

using namespace std;

int main() {
      // Initialize random number generator with the current time as the seed
srand(time(0));
      // Generate a random number between 1 and 100
int randomNumber = rand() % 100 + 1;

 int guess;  // User's guess

    // Keep asking the user to guess until they get it right
do {
     cout << "Guess the number (between 1 and 100): ";
     cin >> guess;

     if (guess < randomNumber) {
       cout << "Too low! Try again." << endl;
     } else if (guess > randomNumber) {
        cout << "Too high! Try again." << endl;
    } else {
        cout << "Congratulations! You guessed the correct number!" << endl;
    }
    } while (guess != randomNumber);  // Repeat until the guess is correct
    
    return 0;
}
TASK 2
SIMPLE CALCULATOR
#include <iostream>
using namespace std;

int main() {
    double num1, num2;  // To store the two numbers input by the user
    char operation;     // To store the operation choice
       // Ask the user to input two numbers
    cout << "Enter first number: ";
    cin >> num1;
    cout << "Enter second number: ";
    cin >> num2;
       // Ask the user to choose an operation
    cout << "Choose an operation (+, -, *, /): ";
    cin >> operation;
       // Perform the operation based on the user's choice
    switch(operation) {
        case '+':
            cout << "Result: " << num1 + num2 << endl;
            break;
        case '-':
            cout << "Result: " << num1 - num2 << endl;
            break;
        case '*':
            cout << "Result: " << num1 * num2 << endl;
            break;
        case '/':
            // Check if the second number is not zero before dividing
            if (num2 != 0) {
                cout << "Result: " << num1 / num2 << endl;
            } else {
                cout << "Error! Division by zero is not allowed." << endl;
            }
            break;
        default:
            cout << "Invalid operation!" << endl;
            break;
    }

    return 0;
}
TASK 4
TO-DO LIST
#include <iostream>
#include <vector>
#include <string>

using namespace std;

int main() {
    vector<string> tasks;    // Vector to store task descriptions
    vector<bool> taskStatus; // Vector to store task status (completed or not)
    int choice;
    string taskDescription;
    int taskIndex;

    do {
        // Display menu
        cout << "\nTo-Do List Manager\n";
        cout << "1. Add Task\n";
        cout << "2. View Tasks\n";
        cout << "3. Mark Task as Completed\n";
        cout << "4. Remove Task\n";
        cout << "5. Exit\n";
        cout << "Enter your choice: ";
        cin >> choice;
        cin.ignore();  // To ignore the newline character after the choice

        switch (choice) {
            case 1:  // Add task
                cout << "Enter the task description: ";
                getline(cin, taskDescription);
                tasks.push_back(taskDescription);
                taskStatus.push_back(false); // Task is initially not completed
                cout << "Task added successfully!" << endl;
                break;

            case 2:  // View tasks
                if (tasks.empty()) {
                    cout << "No tasks available." << endl;
                } else {
                    cout << "To-Do List:" << endl;
                   for (size_t i = 0; i < tasks.size(); i++) {
                        cout << i + 1 << ". " << tasks[i];
                    if (taskStatus[i]) {
                            cout << " [Completed]";
                    } else {
                            cout << " [Pending]";
                        }
                        cout << endl;
                    }
                }
                break;

            case 3:  // Mark task as completed
                cout << "Enter the task number to mark as completed: ";
                cin >> taskIndex;
                if (taskIndex < 1 || taskIndex > tasks.size()) {
                    cout << "Invalid task number!" << endl;
                } else {
                    taskStatus[taskIndex - 1] = true; // Mark task as completed
                    cout << "Task marked as completed!" << endl;
                }
                break;

            case 4:  // Remove task
                cout << "Enter the task number to remove: ";
                cin >> taskIndex;
                if (taskIndex < 1 || taskIndex > tasks.size()) {
                    cout << "Invalid task number!" << endl;
                } else {
                    tasks.erase(tasks.begin() + taskIndex - 1);  // Remove task
                    taskStatus.erase(taskStatus.begin() + taskIndex - 1); // Remove status
                    cout << "Task removed successfully!" << endl;
                }
                break;

            case 5:  // Exit
                cout << "Exiting the To-Do List Manager. Goodbye!" << endl;
                break;

            default:
                cout << "Invalid choice. Please try again." << endl;
        }

    } while (choice != 5);  // Loop until the user chooses to exit

      return 0;
}

